/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sebastian
 */
import java.awt.CardLayout;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import ij.plugin.filter.Analyzer;
import ij.measure.ResultsTable;

public class CountingFrames extends javax.swing.JFrame {
    private static String srswor = "Simple Random Sampling";
    private static String twodsys = "2D Systematic Sampling (aligned SURS)";
    private static String stratrs = "Stratified Random Sampling";
    static String[] sampling_schemes = {srswor, twodsys, stratrs};
    static String[] colors = {"Red", "Green", "Blue", "Magenta", "Cyan",
                              "Yellow","Orange","Black","White"};
    private int cf_x, cf_y, dx, dy;
    private float exclusion_line_multiplier;
    
    private double empirical_sf;
    private java.math.BigDecimal empirical_sf_BD;  // helper var, for spinner
    private int count;
    private int estimate;
    private double SE;
    
    private SamplingSection scheme;

    public CountingFrames() {
        this.cf_x = 62; this.cf_y = 62; this.dx = 300; this.dy = 300;
        this.exclusion_line_multiplier = 0.25f;
        this.count = 0;
        initComponents();
    }
    
    private void makeEstimate() {  
        if ((this.empirical_sf > 0.0) && (this.empirical_sf < 1.0)) {
            this.estimate = (int) Math.round(this.count * 1/this.empirical_sf);
        } else this.estimate = 0;
    }
    
    public int getEstimate() {
        makeEstimate();
        return this.estimate;
    }
    
    private void updateEstimateDisplay() {
        makeEstimate();
        jText_Estimate.setText(String.valueOf(this.estimate));
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelNewSampling = new javax.swing.JPanel();
        comboSamplingScheme = new javax.swing.JComboBox();
        labelChoose = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        radio_FrameDistances = new javax.swing.JRadioButton();
        radio_SF = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboColor = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jButtonOK = new javax.swing.JButton();
        spinner_cfx = new javax.swing.JSpinner();
        spinner_cfy = new javax.swing.JSpinner();
        spinner_dx = new javax.swing.JSpinner();
        spinner_dy = new javax.swing.JSpinner();
        spinner_sf = new javax.swing.JSpinner();
        spinner_exclusionLineMultiplier = new javax.swing.JSpinner();
        jPanelResults = new javax.swing.JPanel();
        jButtonLoadPreviousScheme = new javax.swing.JButton();
        jButtonSaveScheme = new javax.swing.JButton();
        jButtonLoadCounted = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jButtonMeasure = new javax.swing.JButton();
        jSpinnerEmpSamplingFraction = new javax.swing.JSpinner();
        jSpinnerCount = new javax.swing.JSpinner();
        jText_Estimate = new javax.swing.JTextField();
        jButton_CopyToClipboard = new javax.swing.JButton();
        jButton_AddtoResults = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboSamplingScheme.setModel(new javax.swing.DefaultComboBoxModel(sampling_schemes));
        // set twodsys as default
        comboSamplingScheme.setSelectedIndex(1);
        comboSamplingScheme.setToolTipText("");
        comboSamplingScheme.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSamplingSchemeItemStateChanged(evt);
            }
        });
        comboSamplingScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSamplingSchemeActionPerformed(evt);
            }
        });

        labelChoose.setText("Choose sampling method:");

        jLabel2.setText("Counting Frame");
        jLabel2.setToolTipText("");

        jLabel3.setText("Width:");

        jLabel4.setText("Height:");

        buttonGroup1.add(radio_FrameDistances);
        radio_FrameDistances.setText("Set distances between counting frames manually");
        radio_FrameDistances.setToolTipText("");
        radio_FrameDistances.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_FrameDistancesItemStateChanged(evt);
            }
        });

        buttonGroup1.add(radio_SF);
        radio_SF.setSelected(true);
        radio_SF.setText("Specify sampling fraction");
        radio_SF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_SFItemStateChanged(evt);
            }
        });
        radio_SF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_SFActionPerformed(evt);
            }
        });

        jLabel1.setText("Horizontal distance:");

        jLabel5.setText("Vertical distance:");

        jLabel6.setText("Sampling fraction:");

        jLabel7.setText("Overlay parameters (can be left alone)");

        jLabel8.setText("Color:");

        comboColor.setModel(new javax.swing.DefaultComboBoxModel(colors));
        // set orange as default
        comboColor.setSelectedIndex(6);

        jLabel9.setText("Extended exclusion line multiplier (0 is valid):");

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        spinner_cfx.setModel(new javax.swing.SpinnerNumberModel(62, 3, null, 1));
        spinner_cfx.setValue(this.cf_x);
        spinner_cfx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_cfxStateChanged(evt);
            }
        });

        spinner_cfy.setModel(new javax.swing.SpinnerNumberModel(62, 3, null, 1));
        spinner_cfy.setValue(this.cf_y);
        spinner_cfy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_cfyStateChanged(evt);
            }
        });

        spinner_dx.setModel(new javax.swing.SpinnerNumberModel(300, 0, null, 1));
        spinner_dx.setEnabled(false);
        spinner_dx.setValue(this.dx);
        spinner_dx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_dxStateChanged(evt);
            }
        });

        spinner_dy.setModel(new javax.swing.SpinnerNumberModel(300, 0, null, 1));
        spinner_dy.setEnabled(false);
        spinner_dy.setValue(this.dy);
        spinner_dy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_dyStateChanged(evt);
            }
        });

        spinner_sf.setModel(new javax.swing.SpinnerNumberModel(0.05d, 0.005d, 0.9d, 0.001d));
        spinner_sf.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_sfStateChanged(evt);
            }
        });

        spinner_exclusionLineMultiplier.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.25f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.05f)));
        spinner_exclusionLineMultiplier.setValue(this.exclusion_line_multiplier);
        spinner_exclusionLineMultiplier.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_exclusionLineMultiplierStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelNewSamplingLayout = new javax.swing.GroupLayout(jPanelNewSampling);
        jPanelNewSampling.setLayout(jPanelNewSamplingLayout);
        jPanelNewSamplingLayout.setHorizontalGroup(
            jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinner_cfx, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner_cfy, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(comboSamplingScheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(454, Short.MAX_VALUE))
            .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator2)
                        .addComponent(jSeparator1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNewSamplingLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonOK))
                        .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                            .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                                    .addGap(154, 154, 154)
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(radio_FrameDistances)
                                        .addComponent(radio_SF)))
                                .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addGap(137, 137, 137)
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(spinner_sf)
                                        .addComponent(spinner_dy)
                                        .addComponent(spinner_dx)))
                                .addComponent(labelChoose)
                                .addComponent(jLabel7)
                                .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(spinner_exclusionLineMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(0, 88, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        jPanelNewSamplingLayout.setVerticalGroup(
            jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(comboSamplingScheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(spinner_cfx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinner_cfy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(227, Short.MAX_VALUE))
            .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelNewSamplingLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(labelChoose)
                    .addGap(39, 39, 39)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(radio_FrameDistances))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel1)
                        .addComponent(spinner_dx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(spinner_dy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(radio_SF)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(spinner_sf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel7)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelNewSamplingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(spinner_exclusionLineMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOK)
                    .addContainerGap()))
        );

        jTabbedPane.addTab("New sampling", jPanelNewSampling);

        jButtonLoadPreviousScheme.setText("Load previous sampling scheme");
        jButtonLoadPreviousScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadPreviousSchemeActionPerformed(evt);
            }
        });

        jButtonSaveScheme.setText("Save this sampling scheme");
        jButtonSaveScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveSchemeActionPerformed(evt);
            }
        });

        jButtonLoadCounted.setText("Load counted objects");

        jLabel10.setText("Counted objects:");

        jLabel11.setText("Empirical sampling fraction:");

        jLabel12.setText("Estimated total number:");

        jButtonMeasure.setText("Get estimates");
        jButtonMeasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMeasureActionPerformed(evt);
            }
        });

        jSpinnerEmpSamplingFraction.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerEmpSamplingFraction.setEnabled(false);

        jSpinnerCount.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinnerCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerCountStateChanged(evt);
            }
        });

        jText_Estimate.setEditable(false);

        jButton_CopyToClipboard.setText("Copy to clipboard");
        jButton_CopyToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CopyToClipboardActionPerformed(evt);
            }
        });

        jButton_AddtoResults.setText("Add to results table");
        jButton_AddtoResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddtoResultsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelResultsLayout = new javax.swing.GroupLayout(jPanelResults);
        jPanelResults.setLayout(jPanelResultsLayout);
        jPanelResultsLayout.setHorizontalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(jPanelResultsLayout.createSequentialGroup()
                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinnerEmpSamplingFraction, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jSpinnerCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonLoadPreviousScheme)
                            .addComponent(jButtonLoadCounted)))
                    .addGroup(jPanelResultsLayout.createSequentialGroup()
                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonMeasure)
                            .addGroup(jPanelResultsLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(33, 33, 33)
                                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelResultsLayout.createSequentialGroup()
                                        .addGap(153, 153, 153)
                                        .addComponent(jButtonSaveScheme))
                                    .addGroup(jPanelResultsLayout.createSequentialGroup()
                                        .addComponent(jText_Estimate, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(76, 76, 76)
                                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton_AddtoResults)
                                            .addComponent(jButton_CopyToClipboard))))))
                        .addGap(0, 30, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanelResultsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jSpinnerCount, jSpinnerEmpSamplingFraction});

        jPanelResultsLayout.setVerticalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jButtonLoadPreviousScheme)
                    .addComponent(jSpinnerEmpSamplingFraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonLoadCounted)
                    .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jSpinnerCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jText_Estimate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_CopyToClipboard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_AddtoResults)
                .addGap(18, 18, 18)
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonMeasure)
                    .addComponent(jButtonSaveScheme))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Results", jPanelResults);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerCountStateChanged
        this.count = (Integer)jSpinnerCount.getValue();
    }//GEN-LAST:event_jSpinnerCountStateChanged

    private void jButtonMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMeasureActionPerformed
        updateEstimateDisplay();
    }//GEN-LAST:event_jButtonMeasureActionPerformed

    private void jButtonSaveSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveSchemeActionPerformed
        if (this.scheme != null) {
            ij.io.SaveDialog saveDialog = new ij.io.SaveDialog("Save this sampling scheme",
                this.scheme.getFilename(),
                ".ser");
            String dir = saveDialog.getDirectory();
            String filename = saveDialog.getFileName();
            if (filename != null) {
                java.io.File file = new java.io.File(dir, filename);
                saveSamplingScheme(file);
            }
        } else {
            ij.IJ.showMessage("There is no sampling scheme to save.");
        }
    }//GEN-LAST:event_jButtonSaveSchemeActionPerformed

    private void jButtonLoadPreviousSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadPreviousSchemeActionPerformed
        // TODO add your handling code here:
        ij.ImagePlus imp = ij.WindowManager.getCurrentImage();
        if (imp == null) {
            ij.IJ.noImage();
        } else {
            ij.io.OpenDialog openDialog = new ij.io.OpenDialog("Open a previous sampling scheme");
            String path = openDialog.getPath();
            if (path != null) {
                java.io.File file = new java.io.File(openDialog.getPath());
                readSamplingScheme(file);
                empirical_sf = this.scheme.getEmpiricalSf();
                empirical_sf_BD = new java.math.BigDecimal(this.scheme.getEmpiricalSf()).setScale(4,java.math.BigDecimal.ROUND_HALF_UP);
                jSpinnerEmpSamplingFraction.setValue(empirical_sf_BD);
                imp.setOverlay(this.scheme.getOverlay(this.exclusion_line_multiplier), getColor(), null);
            }
        }
    }//GEN-LAST:event_jButtonLoadPreviousSchemeActionPerformed

    private void spinner_exclusionLineMultiplierStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_exclusionLineMultiplierStateChanged
        double mult = (Double) spinner_exclusionLineMultiplier.getValue();
        this.exclusion_line_multiplier = (float) mult;
    }//GEN-LAST:event_spinner_exclusionLineMultiplierStateChanged

    private void spinner_sfStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_sfStateChanged
        // Update (grayed out) dx, dy on the fly
        if (spinner_sf.isEnabled()) {
            update_dxdy();
        }
    }//GEN-LAST:event_spinner_sfStateChanged

    private void spinner_dyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_dyStateChanged
        this.dy = (Integer) spinner_dy.getValue();
        if (spinner_dy.isEnabled()) update_sf();
    }//GEN-LAST:event_spinner_dyStateChanged

    private void spinner_dxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_dxStateChanged
        this.dx = (Integer) spinner_dx.getValue();
        if (spinner_dx.isEnabled()) update_sf();
    }//GEN-LAST:event_spinner_dxStateChanged

    private void spinner_cfyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_cfyStateChanged
        this.cf_y = (Integer) spinner_cfy.getValue();
        if (spinner_sf.isEnabled()) {
            update_dxdy();
        } else if (spinner_dx.isEnabled() && spinner_dy.isEnabled()) {
            update_sf();
        }
    }//GEN-LAST:event_spinner_cfyStateChanged

    private void spinner_cfxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_cfxStateChanged
        this.cf_x = (Integer) spinner_cfx.getValue();
        if (spinner_sf.isEnabled()) {
            update_dxdy();
        } else if (spinner_dx.isEnabled() && spinner_dy.isEnabled()) {
            update_sf();
        }
    }//GEN-LAST:event_spinner_cfxStateChanged

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        /* Make sure there's an image and an area ROI */
        ij.ImagePlus imp = ij.WindowManager.getCurrentImage();
        if (imp == null) {
            ij.IJ.noImage();
        } else {
            ij.gui.Roi roi = imp.getRoi();
            if (roi == null || roi.isArea() == false) {
                ij.IJ.showMessage("Please select a ROI first");
            } else {
                ij.process.ImageProcessor ip_roi = roi.getMask();
                if (ip_roi == null) {
                    // can happen if a rectangular area selection is provided
                    ij.IJ.showMessage("Rectangular ROI is not possible, use a polygon ROI");
                }
                else {
                    ij.IJ.showMessage("ok lets go");
                    /* convert user ROI to mask, get byte array of pixel values
                    * (signed! -> & 0xff to convert to unsigned and check if
                        * equal to 255) */
                    String title = imp.getTitle();
                    int width = imp.getWidth();
                    int height = imp.getHeight();
                    ij.process.ByteProcessor bp = new ij.process.ByteProcessor(width, height);
                    bp.insert(roi.getMask(), roi.getBounds().x, roi.getBounds().y);
                    byte[] roi_pxls;
                    roi_pxls = (byte[]) bp.getPixels();

                    String selectedMethod = (String) comboSamplingScheme.getSelectedItem();
                    // Aligned SURS
                    if (selectedMethod.equals(twodsys)) {
                        this.scheme = new SamplingSection(title, "surs");
                        this.scheme.surs(width, height, this.cf_x, this.cf_y, this.dx, this.dy,
                            this.exclusion_line_multiplier, roi_pxls);
                        imp.setOverlay(this.scheme.getOverlay(exclusion_line_multiplier), getColor(), null);
                        empirical_sf = this.scheme.getEmpiricalSf();
                        empirical_sf_BD = new java.math.BigDecimal(empirical_sf).setScale(4, java.math.BigDecimal.ROUND_HALF_UP);
                        jSpinnerEmpSamplingFraction.setValue(empirical_sf_BD);
                        jTabbedPane.setSelectedIndex(1);
                    }
                    // Simple random sampling without replacement
                    else if (selectedMethod.equals(srswor)) {
                        double sf = (Double) spinner_sf.getValue();
                        this.scheme = new SamplingSection(title, "srswor");
                        this.scheme.srswor(width, height, this.cf_x, this.cf_y, sf,
                            this.exclusion_line_multiplier, roi_pxls);
                        imp.setOverlay(this.scheme.getOverlay(exclusion_line_multiplier), getColor(), null);
                        empirical_sf = this.scheme.getEmpiricalSf();
                        empirical_sf_BD = new java.math.BigDecimal(empirical_sf).setScale(4, java.math.BigDecimal.ROUND_HALF_UP);
                        jSpinnerEmpSamplingFraction.setValue(empirical_sf_BD);
                        jTabbedPane.setSelectedIndex(1);
                    }
                    // Conventional (restricted) stratified random sampling
                    else if (selectedMethod.equals(stratrs)) {
                        if (CheckAndSetGridParamsForUnaligned()) {
                            this.scheme = new SamplingSection(title, "stratrs");
                            this.scheme.stratrs(width, height, this.cf_x, this.cf_y,
                                this.dx, this.dy, this.exclusion_line_multiplier, roi_pxls);
                            imp.setOverlay(this.scheme.getOverlay(exclusion_line_multiplier), getColor(), null);
                        empirical_sf = this.scheme.getEmpiricalSf();
                        empirical_sf_BD = new java.math.BigDecimal(empirical_sf).setScale(4, java.math.BigDecimal.ROUND_HALF_UP);
                        jSpinnerEmpSamplingFraction.setValue(empirical_sf_BD);
                            jTabbedPane.setSelectedIndex(1);
                        } else {
                            ij.IJ.showMessage("Horizontal and vertical distances between "
                                + "counting frames need to be "
                                + "integer multiples of width and height.\n"
                                + "Values have been changed to nearest multiples. "
                                + "Click again if you wish to continue.");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void radio_SFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_SFItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            // disable dx dy elements
            spinner_dx.setEnabled(false);
            spinner_dy.setEnabled(false);
            // enable spinner to specify sampling fraction
            spinner_sf.setEnabled(true);
        }
    }//GEN-LAST:event_radio_SFItemStateChanged

    private void radio_FrameDistancesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_FrameDistancesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            // disable spinner to specify sampling fraction
            spinner_sf.setEnabled(false);
            // enable spinners to specify dx and dy
            spinner_dx.setEnabled(true);
            spinner_dy.setEnabled(true);
        }
    }//GEN-LAST:event_radio_FrameDistancesItemStateChanged

    private void comboSamplingSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSamplingSchemeActionPerformed

    }//GEN-LAST:event_comboSamplingSchemeActionPerformed

    private void comboSamplingSchemeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSamplingSchemeItemStateChanged
        /*
        JComboBox cb = (JComboBox)e.getSource();
        String petName = (String)cb.getSelectedItem();
        */
        String selected = (String)comboSamplingScheme.getSelectedItem();
        if (selected.equals(srswor)) {
            // only specification of a sampling fraction makes sense
            radio_SF.setEnabled(true);
            radio_SF.doClick();
            radio_FrameDistances.setEnabled(false);
        }  else if (selected.equals(stratrs)) {
            // only specification of dx, dy is convenient
            radio_SF.setEnabled(false);
            radio_FrameDistances.setEnabled(true);
            radio_FrameDistances.doClick();
        }  else {
            // need to turn on radio_FrameDistances and radio_SF again
            radio_SF.setEnabled(true);
            radio_FrameDistances.setEnabled(true);
        }
    }//GEN-LAST:event_comboSamplingSchemeItemStateChanged

    private void jButton_CopyToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CopyToClipboardActionPerformed
        Clipboard clipboard = getToolkit().getSystemClipboard();
        StringSelection data = new StringSelection(String.valueOf(this.estimate));
        clipboard.setContents(data, data);
    }//GEN-LAST:event_jButton_CopyToClipboardActionPerformed

    private void jButton_AddtoResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddtoResultsActionPerformed
        // TODO add your handling code here:
        ResultsTable rt = Analyzer.getResultsTable();
        if (rt == null) {
            rt = new ResultsTable();
            Analyzer.setResultsTable(rt);
        }
        rt.incrementCounter();  // add a new row
        rt.addValue("Estimate", String.valueOf(this.estimate));
        rt.show("Results");
    }//GEN-LAST:event_jButton_AddtoResultsActionPerformed

    private void radio_SFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_SFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_SFActionPerformed

    
    private void enable_SF() {
        // enable radio
        //radio_SF.setEnabled(true);
        // enable spinner to specify sampling fractions
        spinner_sf.setEnabled(true);
    }
    
    private void disable_SF() {
         // disable radio
        //radio_SF.setEnabled(false);
        // disable spinner to specify sampling fractions
        spinner_sf.setEnabled(false);
    }
    
    private void enable_dxdy() {
        // enable radio
        //radio_FrameDistances.setEnabled(true);
        // enable text fields to specify dx and dy
        spinner_dx.setEnabled(true);
        spinner_dy.setEnabled(true);
    }
    
    private void disable_dxdy() {
        // disable radio
        //radio_FrameDistances.setEnabled(false);
        // disable text fields to specify dx and dy
        spinner_dx.setEnabled(false);
        spinner_dy.setEnabled(false);
    }
    
    private void toggle_between_sf_dxdy() {
        if (spinner_sf.isEnabled()) {
            // disable sf spinner, enable dxdy text field
           disable_SF();
           enable_dxdy();
        } else if (spinner_dx.isEnabled() && spinner_dy.isEnabled()) {
            disable_dxdy();
            enable_SF();
        }
    }
    
    private java.awt.Color getColor() {
        String selCol = (String)comboColor.getSelectedItem();
        java.awt.Color c = java.awt.Color.orange;
        if (selCol.equals(colors[0])) {
            c = java.awt.Color.red;
        } else if (selCol.equals(colors[1])) {
            c = java.awt.Color.green;
        } else if (selCol.equals(colors[2])) {
            c = java.awt.Color.blue;
        } else if (selCol.equals(colors[3])) {
            c = java.awt.Color.magenta;
        } else if (selCol.equals(colors[4])) {
            c = java.awt.Color.cyan;
        } else if (selCol.equals(colors[5])) {
            c = java.awt.Color.yellow;
        } else if (selCol.equals(colors[6])) {
            c = java.awt.Color.orange;
        } else if (selCol.equals(colors[7])) {
            c = java.awt.Color.black;
        } else if (selCol.equals(colors[8])) {
            c = java.awt.Color.white;
        }
        return c;
    }
    
    private double get_scale_k_of_dx_dy(double sf) {
        // Assumes dx = k*cf_x and dy = k*cf_y (scalement of dx, dy to cf_x, cf_y),
        // calculates k for a given sampling fraction
        // (Formula dervied from sf = cf_x*cf_y / [(cf_x+k*cf_x)*(cf_y+k*cf_y)]
        double k;
        k = Math.sqrt(1/sf) - 1;
        return k;
    }
    
    private int[] getdxdy() {
        int[] dxdy = new int[2];
        if (spinner_dx.isEnabled() && spinner_dy.isEnabled()) {
            // ensure manually typed values are propagated to the model
            //spinner_dx.commitEdit();
            //spinner_dy.commitEdit();
            dxdy[0] = (Integer) spinner_dx.getValue();
            dxdy[1] = (Integer) spinner_dy.getValue();
        } else if (spinner_sf.isEnabled()) {
            // user supplied cf_x, cf_y, desired sf
            double sf = (Double) spinner_sf.getValue();
            double k = get_scale_k_of_dx_dy(sf);
            dxdy[0] = Math.round((float) k);
            dxdy[1] = Math.round((float) k);
        }
        return dxdy;
    }
    
    private void saveSamplingScheme(java.io.File file) {
        if (this.scheme != null) {
            try {
                // write object to file
                FileOutputStream fos = new FileOutputStream(file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(this.scheme);
                oos.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void readSamplingScheme(java.io.File file) {
        try {
            // read seriialized object from file
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);
            SamplingSection loaded_scheme = (SamplingSection) ois.readObject();
            ois.close();
            // check if loaded sampling scheme matches current image
            ij.ImagePlus imp = ij.WindowManager.getCurrentImage();
            if (loaded_scheme.getFilename().equals(imp.getTitle())) {
                this.scheme = loaded_scheme;
            } else {
                ij.IJ.showMessage("Loaded sampling scheme does not match the current image");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }   
    }
    
    private void update_sf() {
        double sf = ((double) this.cf_x * (double) this.cf_y) /
                (((double) this.cf_x + (double) this.dx)*((double) this.cf_y + (double) this.dy));
        // round to 3 digits, b/c that's the step size of the spinner
        java.math.BigDecimal bd = new java.math.BigDecimal(String.valueOf(sf)).setScale(3,
                java.math.BigDecimal.ROUND_HALF_UP);
        spinner_sf.setValue(bd);
    }
    
    private void update_dxdy() {
            double sf = (Double) spinner_sf.getValue();
            double k = get_scale_k_of_dx_dy(sf);
            this.dx = Math.round((float) k * this.cf_x);
            this.dy = Math.round((float) k * this.cf_y);
            spinner_dx.setValue(dx);
            spinner_dy.setValue(dy);
    }
    
    private boolean CheckAndSetGridParamsForUnaligned() {
        // If sampling scheme 'stratified random sampling' is selected:
        //  - dx is required to be an integer multiple of cf_x
        //  - dy is required to be an integer multiple of cf_y
        //  - and sf is therefore restricted to be one of 
        //    {1/(2^2), 1/(3^2), ..., 1/(n^2). B/c sf for practical purposes
        //    is also required to be >= 0.005 here, n <= 14. 
        if ((this.dx % this.cf_x == 0) && (this.dy % this.cf_y == 0) &&
                (this.dx >= this.cf_x) && (this.dy >= this.cf_y)) {
            return true;
        } else {
            // set to nearest multiples
            int new_dx = this.cf_x * Math.round(this.dx / this.cf_x);
            int new_dy = this.cf_y * Math.round(this.dy / this.cf_y);
            // in case user chose values nearer to 0
            if (new_dx == 0) new_dx = this.cf_x;
            if (new_dy == 0) new_dy = this.cf_y;
            spinner_dx.setValue(new_dx);
            spinner_dy.setValue(new_dy);
            update_sf();
            return false;
        }
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboColor;
    private javax.swing.JComboBox comboSamplingScheme;
    private javax.swing.JButton jButtonLoadCounted;
    private javax.swing.JButton jButtonLoadPreviousScheme;
    private javax.swing.JButton jButtonMeasure;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonSaveScheme;
    private javax.swing.JButton jButton_AddtoResults;
    private javax.swing.JButton jButton_CopyToClipboard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelNewSampling;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSpinner jSpinnerCount;
    private javax.swing.JSpinner jSpinnerEmpSamplingFraction;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jText_Estimate;
    private javax.swing.JLabel labelChoose;
    private javax.swing.JRadioButton radio_FrameDistances;
    private javax.swing.JRadioButton radio_SF;
    private javax.swing.JSpinner spinner_cfx;
    private javax.swing.JSpinner spinner_cfy;
    private javax.swing.JSpinner spinner_dx;
    private javax.swing.JSpinner spinner_dy;
    private javax.swing.JSpinner spinner_exclusionLineMultiplier;
    private javax.swing.JSpinner spinner_sf;
    // End of variables declaration//GEN-END:variables
}
